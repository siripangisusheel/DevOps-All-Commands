ansible
w1 ansible_host=172.31.4.130 ansible_user=ec2-user ansible_ssh_private_key_file=/home/ec2-user/sk2.pem
ansible all -m file -a "path=/home/ec2-user/file.txt state=touch"
ansible all -m ansible.builtin.unarchive -a "dest=/home/ec2-user src=/home/ec2-user/apache-tomcat-7.0.92.tar.gz remote_
src=yes"



[Ansible File]
---
# Ansible Playbook to set up a web server and manage configuration
- name: Set up a Web Server
  hosts: web_servers          # Target hosts group (defined in your inventory file)
  become: yes                 # Use privilege escalation (sudo) where necessary
  gather_facts: yes           # Gather facts about the target systems
  vars:
    apache_pkg: "apache2"     # Variable for the Apache package name
    document_root: "/var/www/html"  # Variable for the document root directory
    custom_index: "index.html"    # Custom index file name

  tasks:
    - name: Install Apache Web Server
      apt:                       # The package manager (for Debian/Ubuntu systems)
        name: "{{ apache_pkg }}"  # Use the variable for package name
        state: present            # Ensure the package is installed
        update_cache: yes         # Update the package cache

    - name: Ensure Apache is running
      service:                   # Manage services
        name: "{{ apache_pkg }}"  # Apache service name
        state: started            # Ensure the service is started
        enabled: yes              # Ensure the service is enabled on boot

    - name: Create a custom index.html file
      copy:                       # Copy a file to the remote server
        dest: "{{ document_root }}/{{ custom_index }}"  # Destination path for the index file
        content: |
          <html>
            <head><title>Welcome to the Web Server</title></head>
            <body>
              <h1>Welcome to the Apache Web Server!</h1>
            </body>
          </html>
        owner: root                # Ensure file is owned by root
        group: root                # Group ownership
        mode: '0644'               # File permissions

    - name: Ensure the document root directory exists
      file:                       # Manage files and directories
        path: "{{ document_root }}"  # Path to the directory
        state: directory            # Ensure it's a directory
        owner: root                 # Ownership settings
        group: root
        mode: '0755'                # Permissions

    - name: Check if Apache is running
      shell: ps aux | grep apache2  # Run a shell command to check if Apache is running
      register: apache_status      # Register the result of the shell command
      ignore_errors: yes            # Ignore errors if command fails (can be used for debugging)

    - name: Print Apache status
      debug:                       # Print debug messages to the output
        msg: "{{ apache_status.stdout }}"  # Output the result of the previous command

    - name: Restart Apache service
      service:                     # Manage services
        name: "{{ apache_pkg }}"
        state: restarted            # Restart the service to apply any changes
      when: apache_status.stdout != ""  # Only restart if Apache is running (based on the previous command)

    - name: Ensure Apache is stopped (cleanup)
      service:
        name: "{{ apache_pkg }}"
        state: stopped            # Stop Apache service as part of cleanup
      when: apache_status.stdout != ""  # Only stop if Apache was found running

  handlers:
    - name: Restart Apache
      service:
        name: "{{ apache_pkg }}"
        state: restarted            # Define a handler to restart Apache if needed
